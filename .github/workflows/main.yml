name: Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  

jobs:

  build-front:
    name: Build frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker buildx build . --file ./frontend/Dockerfile 

      # - name: Login to Registry
      #   run: echo "${{ env.TOKEN }}" | docker login "${{ env.REGISTRY_URL }}" -u "${{ env.REGISTRY_USER }}" --password-stdin

      # - name: Push to Registry
      #   run: docker push "${{ env.REGISTRY_URL }}"/dam-front:latest


  build-back:
    name: Build backend
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Build Docker Image
        run: docker buildx build . --file ./backend/Dockerfile 

      # - name: Login to Registry
      #   run: echo "${{ env.TOKEN }}" | docker login "${{ env.REGISTRY_URL }}" -u "${{ env.REGISTRY_USER }}" --password-stdin

      # - name: Push to Registry
      #   run: docker push "${{ env.REGISTRY_URL }}"/dam-api:latest
          

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [build-test-push-front, build-test-push-api]
    
    steps:
      - name: SSH init
        run: |
          mkdir -p ~/.ssh
          cd ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa

      - name: Login to Registry
        run: ssh -oStrictHostKeyChecking=no -i ~/.ssh/id_rsa "${{ env.USERNAME }}"@"${{ env.HOST }}" 'echo "${{ env.TOKEN }}" | docker login "${{ env.REGISTRY_URL }}" -u "${{ env.REGISTRY_USER }}" --password-stdin'

      - name: Deploy
        run: ssh -oStrictHostKeyChecking=no -i ~/.ssh/id_rsa "${{ env.USERNAME }}"@"${{ env.HOST }}" \
            'docker compose pull front && docker compose pull dam-backoffice-api && docker compose up -d'